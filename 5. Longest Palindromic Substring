public class Solution {
    //TOO SLOW.......
    // public String longestPalindrome(String s) {
    //         char [] arr = s.toCharArray();
    //         int max = 0;
    //         String result = "";
    //         int i =0;
    //          if(s.length()==1){
    //              return s;
    //          }
    //         try{
    //             for(i = 0; i < s.length(); i++){
    //                 int lastIndex = s.lastIndexOf(arr[i]);
    //                 if(lastIndex != i  && isPalindrome(arr,i,lastIndex) && max < (lastIndex-i+1)){
    //                     max = lastIndex-i+1;
    //                     result = s.substring(i,i+max);
    //                 }else if(lastIndex != i  && lastIndex-1 > i){
    //                     String sub_s = s.substring(i,lastIndex);
    //                     String n_str = longestPalindrome(sub_s);
    //                     if(max < n_str.length()){
    //                         max = n_str.length();
    //                         result = n_str;
    //                     }
    //                 }else if(lastIndex == i){
    //                     if(max < 1){
    //                         max = 1;
    //                         result = String.valueOf(arr[i]);
    //                     }
    //                 }
    
    //             }
    //         }catch(Exception e){
    //             e.printStackTrace();
    //             System.out.println("sss:"+s+",i:"+i);
    //         }
    
    //         return result;
    // }
     // private Boolean isPalindrome(char[] arr,int l,int r){
    //   for(int i = l, j = r; i <= l+(r-l)/2; i++,j--){
    //         if(arr[i] != arr[j]){
    //             return false;
    //         }
    //     }
    //     return true;
    // }
    //PASS !! BRABO
//      public String longestPalindrome(String s) {{
//         String result = "";
//         int max = 0;
//         char [] arr = s.toCharArray();
//         for(int i = 0; i < s.length(); i++){
//           // System.out.println("t:"+t);
//           int center_r,j;
//           //find the center string of palindrome,it will be a string like 'a' or 'a...a'
//           for( j = i + 1; j < s.length(); j++) {
//               if (arr[i] != arr[j]) {
//                   break;
//               }
//           }

//           center_r = j-1;
//           int l,r;
//           for(l = i-1,r=center_r+1; l>=0 && r < s.length();l--,r++){
//              // System.out.println("l:"+arr[l]+",r:"+arr[r]+",t:"+t);
//              if(arr[l] != arr[r] ){
//                 break;
//              }
//           }
//           if(max < r-l+1-2){
//                 max = r-l+1-2;
//                 result = s.substring(++l,r);
//           }

//         }

//         return result;
//     }
         
//  }
 
// other person's solution ! excellent!
// private int lo, maxLen;

// public String longestPalindrome(String s) {
// 	int len = s.length();
// 	if (len < 2)
// 		return s;
	
//     for (int i = 0; i < len-1; i++) {
//      	extendPalindrome(s, i, i);  //assume odd length, try to extend Palindrome as possible
//      	extendPalindrome(s, i, i+1); //assume even length.
//     }
//     return s.substring(lo, lo + maxLen);
// }

// private void extendPalindrome(String s, int j, int k) {
// 	while (j >= 0 && k < s.length() && s.charAt(j) == s.charAt(k)) {
// 		j--;
// 		k++;
// 	}
// 	if (maxLen < k - j - 1) {
// 		lo = j + 1;
// 		maxLen = k - j - 1;
// 	}

     
//  }
   //optimised 
   public String longestPalindrome(String s) {
        int max = 0;
        int start_index = 0;
        char [] arr = s.toCharArray();
        for(int i = 0; i < s.length(); i++){
          // System.out.println("t:"+t);
          int center_r,j;
          //find the center string of palindrome,it will be a string like 'a' or 'a...a'
          for( j = i + 1; j < s.length(); j++) {
              if (arr[i] != arr[j]) {
                  break;
              }
          }

          center_r = j-1;
          int l,r;
          for(l = i-1,r=center_r+1; l>=0 && r < s.length();l--,r++){
             // System.out.println("l:"+arr[l]+",r:"+arr[r]+",t:"+t);
             if(arr[l] != arr[r] ){
                break;
             }
          }
          if(max < r-l+1-2){
                max = r-l+1-2;
                start_index=++l;
          }

        }

        return s.substring(start_index,start_index+max);
    
         
 }
 
}
