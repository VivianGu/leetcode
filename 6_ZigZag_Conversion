public class Solution {
    //accepted 80ms
	   // public String convert(String s, int numRows) {
	   //     char[] arr = s.toCharArray();
	   //     StringBuffer result = new StringBuffer();
	   //     if(s.length() <= numRows || numRows==1){//一层或者一列的情况，直接输出字符串
	   //         return s;
	   //     }
	   //     int before = 2*(numRows-1);//中间元素与前一个元素的距离
	   //     int after = 0;//中间元素与后一个元素的距离
	   //     for(int i = 0; i < numRows; i++){//按层遍历
	   //         int index = i;
	   //         if(i == 0 || i == (numRows-1)){
	   //             while(index < s.length()){
	   //                 result.append(arr[index]);
	   //                 index = index + 2*(numRows-1);
	   //             }
	   //         }else{
	   //             boolean sign = true;
	   //             while(index < s.length()){
	   //                 if(sign){
	   //                      result.append(arr[index]);
    //     	                 index =  index + before;
    //     	                 sign = false;
	   //                 }else{
	   //                      result.append(arr[index]);
    //     	                 index =  index + after;
    //     	                 sign = true;
	   //                 }
	                   
	   //             }
	   //         }
	   //          before -= 2;
	   //          after += 2;
	   //     }
	   //     return result.toString();
	   // }
	    //accepted 58ms
	    public String convert(String s, int numRows) {
	        char[] arr = s.toCharArray();
	        char[] result = new char[s.length()];
	       // StringBuffer result = new StringBuffer();
	        if(s.length() <= numRows || numRows==1){//一层或者一列的情况，直接输出字符串
	            return s;
	        }
	        int before = 2*(numRows-1);//中间元素与前一个元素的距离
	        int after = 0;//中间元素与后一个元素的距离
	        int r_i = 0;
	        for(int i = 0; i < numRows; i++){//按层遍历
	            int index = i;
	            if(i == 0 || i == (numRows-1)){
	                while(index < s.length()){
	                    result[r_i++]=arr[index];
	                    index = index + 2*(numRows-1);
	                }
	            }else{
	                boolean sign = true;
	                while(index < s.length()){
	                    
	                    result[r_i++]=arr[index];
	                    
	                    if(sign){
        	                 index =  index + before;
        	                 sign = false;
	                    }else{
        	                 index =  index + after;
        	                 sign = true;
	                    }
	                   
	                }
	            }
	             before -= 2;
	             after += 2;
	        }
	        return new String(result);
	    }
	   
	   //other person's answer 1 84ms
	   // public String convert(String s, int numRows) {
	   //      if(numRows<=1)return s;
    //             StringBuilder[] sb=new StringBuilder[numRows];
    //             for(int i=0;i<sb.length;i++){
    //                 sb[i]=new StringBuilder("");   //init every sb element **important step!!!!
    //             }
    //             int incre=1;
    //             int index=0;
    //             for(int i=0;i<s.length();i++){
    //                 sb[index].append(s.charAt(i));
    //                 if(index==0){incre=1;}
    //                 if(index==numRows-1){incre=-1;}
    //                 index+=incre;
    //             }
    //             String re="";
    //             for(int i=0;i<sb.length;i++){
    //                 re+=sb[i];
    //             }
    //             return re.toString();
	   // }
	   //other person's answer 2 61ms
	   //public String convert(String s, int nRows) {
    //     char[] c = s.toCharArray();
    //     int len = c.length;
    //     StringBuffer[] sb = new StringBuffer[nRows];
    //     for (int i = 0; i < sb.length; i++) sb[i] = new StringBuffer();
        
    //     int i = 0;
    //     while (i < len) {
    //         for (int idx = 0; idx < nRows && i < len; idx++) // vertically down
    //             sb[idx].append(c[i++]);
    //         for (int idx = nRows-2; idx >= 1 && i < len; idx--) // obliquely up
    //             sb[idx].append(c[i++]);
    //     }
    //     for (int idx = 1; idx < sb.length; idx++)
    //         sb[0].append(sb[idx]);
    //     return sb[0].toString();
    //     }

	}
