/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    //以下方法精度有问题
    // public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    //     long a = getNum(l1);
    //     long b = getNum(l2);
    //     long c = a+b;
    //     System.out.println("a:"+a+",b:"+b+",c:"+c);
    //     ListNode l3 = new ListNode(Integer.parseInt(String.valueOf(c%10)));
    //     c = c/10;
    //     ListNode ln = l3;
    //     while(c>=1){
    //         int x = Integer.parseInt(String.valueOf(c%10));
    //         ln.next = new ListNode(x);
    //         ln = ln.next;
    //         c = c/10;
    //     }
    //     return l3;
    // }
    // public long getNum(ListNode n){
    //     int ws = 1;
    //     long num = n.val;
    //      while(n.next != null && n.next.val>=0){
    //          num += n.next.val*(Math.pow(10,ws));
    //          ws++;
    //          n = n.next;
    //      }
    //     return num;
    // }
    //以下方法太慢 太慢 太慢 了。。。
    //   public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    //         List<Integer> list1 = getList(l1);
    //         List<Integer> list2 = getList(l2);
    //         int size1 = list1.size();
    //         int size2 = list2.size();
    //         int ms =  Math.max(size1,size2)+1;//最后一位进位
    //         int jw = 0;
    //         List<Integer> totalList = new ArrayList<Integer>();
            
    //         for(int i=0; i<ms; i++){
    //             int a = 0;
    //             int b = 0;
    //             if(i>=size1){
    //                 a = 0;
    //             }else{
    //                 a = list1.get(i);
    //             }
                
    //             if(i>=size2){
    //                 b = 0;
    //             }else{
    //                 b = list2.get(i);
    //             }
                
    //             int c = a+b+jw;
    //             System.out.print("a:"+a+",b:"+b+",c:"+c);
    //             if(c>=10){
    //                 jw = c/10;
    //             }else{
    //                 jw = 0;
    //             }
                
    //             totalList.add(c%10);
    //         }
    //         ListNode l3 = null;
    //         ListNode n = null;
    //         for(int i = 0 ; i<totalList.size(); i++){
    //           if(l3 == null){
    //                 l3 = new ListNode(totalList.get(i));
    //                 n = l3;
    //           }else{
    //               if(i != totalList.size()-1 || totalList.get(i)>0){
    //                   n.next = new ListNode(totalList.get(i));
    //                   n = n.next;  
    //               }
    //           }
    //         }
            
    //       return l3;
    //   }
    // public List<Integer> getList(ListNode n){
    //     List<Integer> list = new ArrayList<Integer>();
    //     int num = n.val;
    //     list.add(num);
    //      while(n.next != null && n.next.val>=0){
    //          num = n.next.val;
    //          list.add(num);
    //          n = n.next;
    //      }
    //     return list;
    // }
    
    //貌似可以再简化一下。。。
    // public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    //     int a = l1.val;
    //     int b = l2.val;
    //     int jw = 0;
    //     int c = a+b;
    //     jw = c/10;
    //     ListNode l3 = new ListNode(c%10);
    //     ListNode n = l3;
    //     ListNode n1 = l1.next;
    //     ListNode n2 = l2.next;
    //     while(n1!=null||n2!=null){
    //         if(n1==null){
    //             a = 0;
    //         }else{
    //             a = n1.val;
    //         }
    //         if(n2==null){
    //             b = 0;
    //         }else{
    //             b = n2.val;
    //         }
    //         c = a+b+jw;
    //         jw = c/10;
    //         n.next = new ListNode(c%10);
    //         n = n.next;
    //         n1 = n1==null?null:n1.next;
    //         n2 = n2==null?null:n2.next;
    //     }
    //     if(jw>0){
    //         n.next = new ListNode(jw);
    //     }
    //     return l3;
        
    // }
   
   //哈哈，好像还可以再简单点。。。
//   public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
//         int a = 0;
//         int b = 0;
//         int jw = 0;
//         int c = 0;
//         ListNode l3 = null;
//         ListNode n = null;
//         while(l1!=null||l2!=null){
//             if(l1==null){
//                 a = 0;
//             }else{
//                 a = l1.val;
//             }
//             if(l2==null){
//                 b = 0;
//             }else{
//                 b = l2.val;
//             }
//             c = a+b+jw;
//             jw = c/10;
//             if(l3==null){
//                 l3 = new ListNode(c%10);
//                 n = l3;
//             }else{
//                 n.next = new ListNode(c%10);
//                 n = n.next;
//             }
//             l1 = l1==null?null:l1.next;
//             l2 = l2==null?null:l2.next;
//         }
//         if(jw>0){
//             n.next = new ListNode(jw);
//         }
//         return l3;
        
//     }
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int a = 0;
        int b = 0;
        int jw = 0;
        int c = 0;
        ListNode l3 = null;
        ListNode n = null;
        while(l1!=null||l2!=null){
            a = l1==null?0:l1.val;
            b = l2==null?0:l2.val;
            c = a+b+jw;
            jw = c/10;
            if(l3==null){
                l3 = new ListNode(c%10);
                n = l3;
            }else{
                n.next = new ListNode(c%10);
                n = n.next;
            }
            l1 = l1==null?null:l1.next;
            l2 = l2==null?null:l2.next;
        }
        if(jw>0){
            n.next = new ListNode(jw);
        }
        return l3;
        
    }
    
}
